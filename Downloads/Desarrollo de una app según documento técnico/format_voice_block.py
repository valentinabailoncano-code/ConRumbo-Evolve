from pathlib import Path

path = Path('frontend/script.js')
text = path.read_text(encoding='utf-8')

start = text.index('getVoiceForLanguage(language) {')
line_start = text.rfind('\n', 0, start)
end = text.index('    setupDOM()', start)
new_block = """    getVoiceForLanguage(language) {\n        if (!this.voices.length) return null;\n\n        const preferredLangs = language === 'es'\n            ? ['es-es', 'es_es', 'es-mx', 'es-419', 'es', 'spa']\n            : ['en-us', 'en_us', 'en-gb', 'en_gb', 'en-au', 'en', 'eng'];\n        const preferredNames = language === 'es'\n            ? ['google espa', 'google us español', 'google español', 'microsoft sabina', 'microsoft laura', 'microsoft pablo', 'microsoft andres']\n            : ['google us english', 'google uk english', 'google english', 'microsoft aria', 'microsoft guy', 'microsoft zira'];\n\n        const scored = this.voices\n            .map((voice) => {\n                const lang = (voice.lang || '').toLowerCase();\n                const name = (voice.name || '').toLowerCase();\n                let score = 0;\n\n                preferredLangs.forEach((target, index) => {\n                    const weight = 50 - index * 6;\n                    if (lang === target) score += weight + 25;\n                    if (lang.startsWith(target)) score += weight + 12;\n                    if (lang.includes(target)) score += weight;\n                });\n\n                preferredNames.forEach((pattern, index) => {\n                    const weight = 60 - index * 8;\n                    if (name.includes(pattern)) score += weight;\n                });\n\n                if (name.includes('neural')) score += 6;\n                if (name.includes('natural')) score += 4;\n                if (name.includes('premium')) score += 4;\n\n                return { voice, score };\n            })\n            .filter((item) => item.score > 0)\n            .sort((a, b) => b.score - a.score);\n\n        if (scored.length) {\n            return scored[0].voice;\n        }\n\n        const fallbackPrefix = language === 'es' ? 'es' : 'en';\n        return this.voices.find((voice) => (voice.lang || '').toLowerCase().startsWith(fallbackPrefix)) || this.voices[0];\n    }\n\n    scheduleAutoAdvance() {\n        this.cancelAutoAdvance();\n        if (!this.autoPlay) return;\n        this.autoAdvanceTimer = setTimeout(() => {\n            if (this.autoPlay) {\n                this.advanceStep(true);\n            }\n        }, this.autoAdvanceDelayMs);\n    }\n\n"""
text = text[:line_start+1] + new_block + text[end:]

path.write_text(text, encoding='utf-8')
